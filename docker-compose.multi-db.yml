version: '3.8'

services:
  # Agent Orchestration API
  agent-orchestrator:
    build: .
    container_name: agent-orchestrator
    ports:
      - "8000:8000"
    environment:
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - DATABASE_URL=postgresql://agent_user:${POSTGRES_PASSWORD}@postgres:5432/agent_orchestration
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - QDRANT_URL=http://qdrant:6333
      - REDIS_URL=redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - agent-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database - Full version for relational data
  postgres:
    image: postgres:15
    container_name: agent-postgres
    environment:
      - POSTGRES_DB=agent_orchestration
      - POSTGRES_USER=agent_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=en_US.utf8 --lc-ctype=en_US.utf8
    ports:
      - "5432:5432"
    volumes:
      - ./volumes/postgres_data:/var/lib/postgresql/data
      - ./scripts/postgres-init:/docker-entrypoint-initdb.d
    networks:
      - agent-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U agent_user -d agent_orchestration"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: >
      postgres -c max_connections=200
               -c shared_buffers=512MB
               -c effective_cache_size=2GB
               -c maintenance_work_mem=128MB
               -c checkpoint_completion_target=0.9
               -c wal_buffers=16MB
               -c default_statistics_target=100
               -c random_page_cost=1.1
               -c effective_io_concurrency=200
               -c work_mem=4MB
               -c huge_pages=off
               -c shared_preload_libraries='pg_stat_statements'

  # Neo4j Graph Database - For document relationships and conflict tracking
  neo4j:
    image: neo4j:5-community
    container_name: agent-neo4j
    environment:
      - NEO4J_AUTH=neo4j/${NEO4J_PASSWORD}
      - NEO4J_PLUGINS=["apoc", "graph-data-science"]
      - NEO4J_dbms_memory_pagecache_size=1G
      - NEO4J_dbms_memory_heap_initial__size=1G
      - NEO4J_dbms_memory_heap_max__size=2G
      - NEO4J_dbms_connector_bolt_enabled=true
      - NEO4J_dbms_connector_http_enabled=true
      - NEO4J_dbms_default__listen__address=0.0.0.0
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    volumes:
      - ./volumes/neo4j_data:/data
      - ./volumes/neo4j_logs:/logs
      - ./volumes/neo4j_import:/var/lib/neo4j/import
      - ./volumes/neo4j_plugins:/plugins
    networks:
      - agent-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "${NEO4J_PASSWORD}", "MATCH (n) RETURN count(n) LIMIT 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Qdrant Vector Database - For semantic search and embeddings
  qdrant:
    image: qdrant/qdrant:v1.7.4
    container_name: agent-qdrant
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
      - QDRANT__LOG_LEVEL=INFO
      - QDRANT__STORAGE__STORAGE_PATH=/qdrant/storage
      - QDRANT__STORAGE__SNAPSHOTS_PATH=/qdrant/snapshots
      - QDRANT__STORAGE__ON_DISK_PAYLOAD=true
      - QDRANT__STORAGE__PERFORMANCE__OPTIMIZERS__INDEXING_THRESHOLD_KB=20000
    ports:
      - "6333:6333"  # REST API
      - "6334:6334"  # gRPC
    volumes:
      - ./volumes/qdrant_storage:/qdrant/storage
      - ./volumes/qdrant_snapshots:/qdrant/snapshots
    networks:
      - agent-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Redis for caching and task queuing
  redis:
    image: redis:7
    container_name: agent-redis
    ports:
      - "6379:6379"
    volumes:
      - ./volumes/redis_data:/data
    networks:
      - agent-network
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Adminer for database management
  adminer:
    image: adminer:4
    container_name: agent-adminer
    ports:
      - "8080:8080"
    environment:
      - ADMINER_DESIGN=pepa-linha
      - ADMINER_DEFAULT_SERVER=postgres
    networks:
      - agent-network
    restart: unless-stopped
    profiles:
      - dev

volumes:
  postgres_data:
    driver: local
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  neo4j_import:
    driver: local
  neo4j_plugins:
    driver: local
  qdrant_storage:
    driver: local
  qdrant_snapshots:
    driver: local
  redis_data:
    driver: local

networks:
  agent-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16